class Solution {
public:
    int myAtoi(string s) {
        int n = s.size();
        int i = 0;
        long long rem = 0;
        int neg = 0;

        // 1. Skip leading spaces
        while (i < n && s[i] == ' ') i++;

        // 2. Handle sign
        if (i < n && (s[i] == '-' || s[i] == '+')) {
            if (s[i] == '-') neg = 1;
            i++;
        }

        // 3. Parse digits
        while (i < n && s[i] >= '0' && s[i] <= '9') {
            int digit = s[i] - '0';

            // 4. Handle overflow before adding digit
            if (rem > INT_MAX / 10 || (rem == INT_MAX / 10 && digit > 7)) {
                return neg ? INT_MIN : INT_MAX;
            }

            rem = rem * 10 + digit;
            i++;
        }

        // 5. Apply sign
        if (neg) rem = -rem;

        return (int)rem;
    }
};
