class Solution {
private:
    int check(vector<int>&nums,int k)
    {
        int n=nums.size();
        int cnt=0;
        map<int,int> mpp;

        int i=0,j=0;
        while(j<n)
        {
            mpp[nums[j]]++;
            if(mpp.size()>k)
            {
                while(mpp.size()>k)
                {
                    mpp[nums[i]]--;
                    if(mpp[nums[i]]==0)
                    mpp.erase(nums[i]);


                    i++;
                }
            }
            cnt=cnt+(j-i+1);
            j++;
        }
        
        return cnt;
    }    
public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        

        int res=check(nums,k)-check(nums,k-1);
        //o(n^2)
        // for(int i=0;i<n;i++)
        // {
        //     st.clear();
        //     for(int j=i;j<n;j++)
        //     {
        //         st.insert(nums[j]);
        //         if(st.size()==k&&(j-i+1)>=k)
        //         {
        //             cnt=cnt+1;
        //         }
        //         else if(st.size()>k){
        //             break;
        //         }
        //         else{
        //             continue;
        //         }
        //     }
            
        // }

        //o(n)
        return res;
    }
};
